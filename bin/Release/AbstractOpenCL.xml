<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AbstractOpenCL</name>
    </assembly>
    <members>
        <member name="T:OpenCL.Abstract.Abstract">
            <summary>
            Regulates the rules of working of the whole AbstractOpenCL environment.
            </summary>
        </member>
        <member name="F:OpenCL.Abstract.Abstract.diagnostics">
            <summary>
            Stores the initial value of Diagnostics property.
            </summary>
        </member>
        <member name="F:OpenCL.Abstract.Abstract.traceErrors">
            <summary>
            Stores the initial value of TraceErrors property.
            </summary>
        </member>
        <member name="F:OpenCL.Abstract.Abstract.throwOnErrors">
            <summary>
            Stores the initial value of ThrowOnErrors property.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Abstract.Trace(System.String)">
            <summary>
            Writes the input to System.Diagnostics.Trace
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:OpenCL.Abstract.Abstract.Trace(System.String,System.Object[])">
            <summary>
            Writes the input to System.Diagnostics.Trace
            </summary>
            <param name="s"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenCL.Abstract.Abstract.TraceLine(System.String)">
            <summary>
            Writes the input to System.Diagnostics.Trace
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:OpenCL.Abstract.Abstract.TraceLine(System.String,System.Object[])">
            <summary>
            Writes the input to System.Diagnostics.Trace
            </summary>
            <param name="s"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenCL.Abstract.Abstract.Diagnose(OpenCL.Abstract.ErrorCode)">
            <summary>
            Returns a string (if available) that explains the given error code.
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.Abstract.LogIfError(OpenCL.Abstract.ErrorCode)">
            <summary>
            Writes an entry to log if an error was detected. Returns true if it was detected.
            </summary>
            <param name="errorCode">the code of error</param>
            <returns>true if error code was not equal to ErrorCode.Success</returns>
        </member>
        <member name="P:OpenCL.Abstract.Abstract.Diagnostics">
            <summary>
            If true, all AbstracOpenCL methods will print self-diagnostic information 
            using System.Diagnostics.Trace - this makes them much slower, but it is useful 
            to determine what is in fact happening.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Abstract.TraceErrors">
            <summary>
            If true, all AbstracOpenCL methods will print information using System.Diagnostics.Trace 
            in case there is any error. Error situation is defined as such when the ErrorCode 
            returned by the underlying call to OpenCL API is different than CL_SUCCESS.
            This is very useful track down source of error.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Abstract.ThrowOnErrors">
            <summary>
            If true, all AbstracOpenCL methods will throw exception in case there is any error.
            If false, none will throw.
            If null, the behaviour implemented by default will occur, i.e. some will throw and some will not.
            </summary>
        </member>
        <member name="T:OpenCL.Abstract.Buffer`1">
            <summary>
            Buffer is a general-purpose MemoryObject.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:OpenCL.Abstract.MemoryObject`1">
            <summary>
            Abstract parent of Buffer and Image classes
            </summary>
            <typeparam name="T">type of the entries contained in the memory</typeparam>
        </member>
        <member name="M:OpenCL.Abstract.MemoryObject`1.AddWritingResult(OpenCL.Abstract.ActionResult)">
            <summary>
            This method should be executed only in case of diagnostic run,
            i.e. when Abstract.Diagnostics is true.
            </summary>
            <param name="result">result that is added to the list of writing results</param>
        </member>
        <member name="M:OpenCL.Abstract.MemoryObject`1.AddReadingResult(OpenCL.Abstract.ActionResult)">
            <summary>
            This method should be executed only in case of diagnostic run,
            i.e. when Abstract.Diagnostics is true.
            </summary>
            <param name="result">result that is added to the list of reading results</param>
        </member>
        <member name="M:OpenCL.Abstract.MemoryObject`1.Write">
            <summary>
            Copies the whole default backing collection into the buffer using default command queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.MemoryObject`1.Write(OpenCL.Abstract.CommandQueue,System.Boolean,`0[],System.UInt32,System.UInt32)">
            <summary>
            Writes given source collection to the given subset of the buffer.
            </summary>
            <param name="queue">command queue on which the writing will be performed</param>
            <param name="blockingWrite">if true, the method blocks until writing has ended</param>
            <param name="sourceCollection">source array</param>
            <param name="startingIndex">starting index of buffer to be overwritten</param>
            <param name="length">number of buffer entries to be overwritten</param>
            <returns>true if writing procedure was successfully invoked</returns>
        </member>
        <member name="M:OpenCL.Abstract.MemoryObject`1.Read">
            <summary>
            Reads the whole buffer using default command queue and stores it in the default backing collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.MemoryObject`1.Read(System.UInt32,System.UInt32)">
            <summary>
            Reads a selected part of the buffer using default command queue and stores it at the beginning 
            of the default backing collection.
            </summary>
            <param name="startingIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.MemoryObject`1.Copy(OpenCL.Abstract.MemoryObject{`0})">
            <summary>
            Enqueues copying of all contents of this MemoryObject to another MemoryObject.
            </summary>
            <param name="destination">target memory</param>
            <returns>true if the copy operation was successfully enqueued</returns>
        </member>
        <member name="P:OpenCL.Abstract.MemoryObject`1.Length">
            <summary>
            Length of the backing collection, and also the buffer itself.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Buffer`1.Dispose">
            <summary>
            Disposes the underlying OpenCL memory handle.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Buffer`1.ToString">
            <summary>
            Returns a short string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.Buffer`1.ToDetailedString">
            <summary>
            Returns a long and very detailed string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCL.Abstract.Buffer`1.Array">
            <summary>
            Backing collection of this buffer. Alias for BackingCollection field.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Buffer`1.Value">
            <summary>
            Value of the first cell of the backing array.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.CommandQueue.#ctor(OpenCL.Abstract.Device,OpenCL.Abstract.Context)">
            <summary>
            Creates a new command queue on a specific context on a specific device.
            </summary>
            <param name="device">a device</param>
            <param name="context">a context on that deviec</param>
        </member>
        <member name="M:OpenCL.Abstract.CommandQueue.ToString">
            <summary>
            Returns a short string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.CommandQueue.ToDetailedString">
            <summary>
            Returns a long and very detailed string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCL.Abstract.Context">
            <summary>
            Device's context.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Context.#ctor">
            <summary>
            Creates a context for a default device on a default platform.
            
            This method should not fail unless there are no OpenCL devices present.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Context.#ctor(OpenCL.Abstract.Device)">
            <summary>
            Creates a context for a specific Device.
            </summary>
            <param name="device">a device</param>
        </member>
        <member name="M:OpenCL.Abstract.Context.#ctor(OpenCL.Abstract.Device[])">
            <summary>
            Creates a context for a Device array.
            </summary>
            <param name="devices">set of devices</param>
        </member>
        <member name="M:OpenCL.Abstract.Context.ToString">
            <summary>
            Returns a short string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.Context.ToDetailedString">
            <summary>
            Returns a long and very detailed string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCL.Abstract.Context.Devices">
            <summary>
            Array of devices, for which this context is valid.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Device.#ctor">
            <summary>
            Constructs a Device of any type, on a first found Platform.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Device.#ctor(OpenCL.Abstract.Platform,OpenCL.Abstract.DeviceType)">
            <summary>
            Tries to find a device of specific type on a specific platform.
            </summary>
            <param name="platform"></param>
            <param name="deviceType"></param>
        </member>
        <member name="M:OpenCL.Abstract.Device.ToString">
            <summary>
            Returns a short string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.Device.ToDetailedString">
            <summary>
            Returns a long and very detailed string that represents this object.
            </summary>
            <returns>list of details of this Device</returns>
        </member>
        <member name="T:OpenCL.Abstract.Devices">
            <summary>
            Abstraction layer enabling easy Device initialization.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Devices.InitializeAll">
            <summary>
            Initializes all devices from all platforms.
            </summary>
            <returns>array of all OpenCL devices present in the environment</returns>
        </member>
        <member name="M:OpenCL.Abstract.Devices.InitializeAtMost(System.UInt32)">
            <summary>
            Initializes at most the given number of devices of any type from all available platforms.
            </summary>
            <param name="maximumNumber">maximum length of the returned array</param>
            <returns>array of devices that has length and contents meeting the criteria</returns>
        </member>
        <member name="M:OpenCL.Abstract.Devices.InitializeAtMost(OpenCL.Abstract.DeviceType,System.UInt32)">
            <summary>
            Initializes at most the given number of devices of given type from all available platforms.
            </summary>
            <param name="deviceType"></param>
            <param name="maximumNumber">maximum length of the returned array</param>
            <returns>array of devices that has length and contents meeting the criteria</returns>
        </member>
        <member name="M:OpenCL.Abstract.Devices.InitializeAll(OpenCL.Abstract.Platform)">
            <summary>
            Initializes all devices from a given platform.
            </summary>
            <param name="platform"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.Devices.InitializeAtMost(OpenCL.Abstract.Platform,System.UInt32)">
            <summary>
            Initializes at most the given number of devices of any type from a given platform.
            </summary>
            <param name="platform"></param>
            <param name="maximumNumber">maximum length of the returned array</param>
            <returns>array of devices that has length and contents meeting the criteria</returns>
        </member>
        <member name="M:OpenCL.Abstract.Devices.InitializeAtMost(OpenCL.Abstract.Platform,OpenCL.Abstract.DeviceType,System.UInt32)">
            <summary>
            Initializes at most the given number of devices of given type from a given platform.
            </summary>
            <param name="platform"></param>
            <param name="deviceType"></param>
            <param name="maximumNumber">maximum length of the returned array</param>
            <returns>array of devices that has length and contents meeting the criteria</returns>
        </member>
        <member name="T:OpenCL.Abstract.ErrorCode">
            <summary>
            Error codes for all possible encountered errors.
            </summary>
        </member>
        <member name="F:OpenCL.Abstract.ErrorCode.Success">
            <summary>
            There was no error.
            </summary>
        </member>
        <member name="T:OpenCL.Abstract.PlatformInfo">
            <summary>
            Kinds of information about Platform
            </summary>
        </member>
        <member name="T:OpenCL.Abstract.DeviceType">
            <summary>
            Possible types that a Device can have.
            </summary>
        </member>
        <member name="F:OpenCL.Abstract.Kernel.defaultQueue">
            <summary>
            Default queue on which this kernel is launched unless other queue is specified 
            in Launch1D(), Launch2D(), Launch3D() or LaunchND() method call.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Kernel.SetArguments``1(OpenCL.Abstract.Buffer{``0}[])">
            <summary>
            Sets arguments of the Kernel to given ones. Setting process starts from argument with index 0.
            If a buffer in the list is null, its position is omitted from the process.
            
            SetArguments(b1, b2, b3);
            
            is identical to:
            
            SetArgument(0, b1);
            SetArgument(1, b2);
            SetArgument(2, b3);
            
            and
            
            SetArguments(b1, null, b3);
            
            is identical to:
            
            SetArgument(0, b1);
            SetArgument(2, b3);
            </summary>
            <typeparam name="T">all buffers must have identical type - if they do not,
            use individual SetArgument(int, buffer) instead</typeparam>
            <param name="buffers">vararg list of buffers</param>
        </member>
        <member name="M:OpenCL.Abstract.Kernel.ToString">
            <summary>
            Returns a short string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.Kernel.ToDetailedString">
            <summary>
            Returns a long and very detailed string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCL.Abstract.Kernels">
            <summary>
            Collection of example kernel, which are built on-demand, i.e. when a constructor 
            of the first instance of a given Kernel is called.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Kernels.Device">
            <summary>
            Specifies the Device on which the example kernels are built.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Kernels.Context">
            <summary>
            Specifies the Context on which the example kernels are created.
            </summary>
        </member>
        <member name="T:OpenCL.Abstract.MemoryObject">
            <summary>
            Utility class for memory unit conversion in ToString() methods of objects 
            that have properties like available memory, max size in bytes, etc.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Platform.#ctor">
            <summary>
            Initializes the first encountered platform.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Platform.ToString">
            <summary>
            Returns a short string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.Platform.ToDetailedString">
            <summary>
            Returns a long and very detailed string that represents this object.
            </summary>
            <returns>list of details of this Platform</returns>
        </member>
        <member name="T:OpenCL.Abstract.Platforms">
            <summary>
            Abstraction layer enabling easy Platform initialization.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.Platforms.Count">
            <summary>
            Determines and returns number of available OpenCL platforms.
            </summary>
            <returns>number of available OpenCL platforms, 0 in case of any errors</returns>
        </member>
        <member name="M:OpenCL.Abstract.Program.#ctor(OpenCL.Abstract.Context,OpenCL.Abstract.SourceCode)">
            <summary>
            Creates a new Program, and does not build it.
            </summary>
            <param name="context">context for which the program is created</param>
            <param name="sourceCode">source code of the program</param>
        </member>
        <member name="M:OpenCL.Abstract.Program.#ctor(OpenCL.Abstract.Context,OpenCL.Abstract.SourceCode,OpenCL.Abstract.Device)">
            <summary>
            Creates a new Program, and builds it on a given device with no extra build options.
            </summary>
            <param name="context">context for which the program is created</param>
            <param name="sourceCode">source code of the program</param>
            <param name="device">device on which the program will be built</param>
        </member>
        <member name="M:OpenCL.Abstract.Program.#ctor(OpenCL.Abstract.Context,OpenCL.Abstract.SourceCode,OpenCL.Abstract.Device,System.String)">
            <summary>
            Creates a new Program, and builds it on a given device with given build options.
            </summary>
            <param name="context">context for which the program is created</param>
            <param name="sourceCode">source code of the program</param>
            <param name="device">device on which the program will be built</param>
            <param name="buildOptions">build options for the OpenCL compiler</param>
        </member>
        <member name="M:OpenCL.Abstract.Program.BuildInformation">
            <summary>
            Returns build information, for a Device on which this program was built.
            </summary>
            <returns>build information</returns>
        </member>
        <member name="M:OpenCL.Abstract.Program.BuildInformation(OpenCL.Abstract.Device)">
            <summary>
            Returns build info, for the given Device.
            </summary>
            <param name="forDevice">a Device for which build information is gathered</param>
            <returns>build information</returns>
        </member>
        <member name="M:OpenCL.Abstract.Program.ToString">
            <summary>
            Returns a short string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.Program.ToDetailedString">
            <summary>
            Returns a long and very detailed string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCL.Abstract.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Properties.Resources.cl_constantAssignment">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Properties.Resources.cl_generalPurpose">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Properties.Resources.cl_pairwiseArithmetic">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Properties.Resources.cl_pairwiseLogic">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Properties.Resources.cl_singleVectorArithmetic">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.Properties.Resources.cl_singleVectorLogic">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:OpenCL.Abstract.SourceCode">
            <summary>
            This is a immutable object.
            </summary>
        </member>
        <member name="F:OpenCL.Abstract.SourceCode.path">
            <summary>
            Either path to a file or name of the resource, depending on context.
            </summary>
        </member>
        <member name="F:OpenCL.Abstract.SourceCode.lines">
            <summary>
            Stores lines of source code.
            </summary>
        </member>
        <member name="F:OpenCL.Abstract.SourceCode.lenghts">
            <summary>
            Stores lenghts of lines of source code.
            </summary>
        </member>
        <member name="M:OpenCL.Abstract.SourceCode.#ctor(System.String)">
            <summary>
            Creates e new source code from a file at a specified path.
            </summary>
            <param name="filePath">path to the file</param>
        </member>
        <member name="M:OpenCL.Abstract.SourceCode.#ctor(System.Resources.ResourceManager,System.String)">
            <summary>
            Retrieves OpenCL source code contained at a specific path in the resource file of a given assembly.
            </summary>
            <param name="manager">resource manager of some resources file</param>
            <param name="resourcePath">path to the resource in the resource file</param>
        </member>
        <member name="M:OpenCL.Abstract.SourceCode.Append(OpenCL.Abstract.SourceCode)">
            <summary>
            
            </summary>
            <param name="otherSource"></param>
            <returns>returns new instance of source code</returns>
        </member>
        <member name="M:OpenCL.Abstract.SourceCode.Insert(System.UInt32,OpenCL.Abstract.SourceCode)">
            <summary>
            
            </summary>
            <param name="afterLineNumber"></param>
            <param name="otherSource"></param>
            <returns>returns new instance of source code</returns>
        </member>
        <member name="M:OpenCL.Abstract.SourceCode.ToString">
            <summary>
            Returns a short string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCL.Abstract.SourceCode.ToDetailedString">
            <summary>
            Returns a long and very detailed string that represents this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCL.Abstract.SourceCode.Path">
            <summary>
            Used to access the path of the resource
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.SourceCode.Lines">
            <summary>
            Used to access lines of source code.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.SourceCode.LinesCount">
            <summary>
            Used to easily access total count of lines of source code.
            </summary>
        </member>
        <member name="P:OpenCL.Abstract.SourceCode.Lenghts">
            <summary>
            Used to access lenghts of lines of source code.
            </summary>
        </member>
    </members>
</doc>
